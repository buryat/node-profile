#!/usr/bin/env node

var exec=require('child_process').exec
, fs = require('fs')

process.addListener('SIGINT', function () {});

var logName = 'profile-'+Date.now()+Math.floor(Math.random()*10000)+'.log';

var command = 'node --prof --logfile='+logName+' '+process.ARGV[2];

console.log('Running: '+command);

exec(command, function (error, stdout, stderr) {
	exec('locate linux-tick-processor.py', function(err, stdout, stderr) {
		if (err) throw err;

		var tickLocations = stdout.trim().split('\n');
		if (tickLocations[0]) {
			exec('python '+tickLocations[0]+' '+logName, function(err, stdout, stderr) {
				console.log(stderr);
				if (!err) {
					console.log(colorFormat(stdout));
				} else {
					console.log(style(31, '\nCould not generate profile.'));
				}

				fs.unlink(logName, function (err) {
					if (err) throw err;
					console.log('Successfully deleted temporary: '+logName);
				});
			});
		} else {
			throw new Error('Could not find linux-tick-processor.py');
		}
	});
});

function colorFormat(profileLog) {
	var lines = profileLog.split('\n');
	var newLog = [];

	lines.forEach(function(line) {
		if (line.match(/ *\[.*\]/)) {
			newLog.push(style(33, line));
		} else if (line.match(/^[^ ]/)) {
			newLog.push(style(37, line));
		} else if (line.match(/^   [^ ]/)) {
			newLog.push(style(35, line));
		} else {
			newLog.push(line.replace(/ *([^ ]+)/, function(match){return style(31, match)}).replace(/([0-9]+\.[0-9]+%)/, function(match){return style(33, match)}));
		}
	});

	return newLog.join('\n');
}

function style(colorCode, str) {
	return '\x1B[1m\x1B['+colorCode+'m'+str+'\x1B[0m';
}
